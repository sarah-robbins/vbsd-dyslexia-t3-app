import React, { useState, useEffect } from "react";
import { version } from "package.json";
// import styles from './index.module.css';
// import { signIn, signOut, useSession } from 'next-auth/react';
import { type NextPage } from "next";
import Head from "next/head";
// import { api } from '@/utils/api';
// import SplashSpeedDial from '@/components/SplashSpeedDial/SplashSpeedDial';
// import { useSession } from "next-auth/react";
import CheckIcon from "@mui/icons-material/Check";
import ErrorIcon from "@mui/icons-material/Error";
import LoginButton from "@/components/LoginButton/LoginButton";
import { api } from "@/utils/api";
import { type AppSettings } from "@/types";
import { Card } from "primereact/card";
import { Button } from "@mui/material";

const Home: NextPage = () => {
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });

  // const { data: sessionData } = useSession();
  const getAppSettings = api.settings.getAllSettings.useQuery();
  const [settings, setSettings] = useState<AppSettings[] | undefined>([]);

  useEffect(() => {
    // if (!getAppSettings.data) return;
    setSettings(getAppSettings.data);
  }, [getAppSettings]);

  useEffect(() => {
    if (settings) {
      // Convert the settings object to a string
      const settingsStr = JSON.stringify(settings);
      // Save to session storage
      sessionStorage.setItem("settings", settingsStr);
    }
  }, [settings]);

  const [appIsUpdated, setAppIsUpdated] = useState<boolean>(true);

  useEffect(() => {
    const appVersion = "0.1.0";
    if (appVersion !== version.toString()) {
      setAppIsUpdated(false);
    }
  }, []);

  // Check if the app is updated
  const updateApp =
    appIsUpdated === true ? (
      <div className="updated flex flex-row justify-content-center">
        <CheckIcon color="primary" className="mr-2" />
        <p className="p-0 m-0">Your app is up to date!</p>
      </div>
    ) : (
      <div className="not-updated flex flex-row justify-content-center">
        <Button variant="contained" color="error">
          <ErrorIcon className="mr-2 text-white" />
          <p className="p-0 m-0">Update available!</p>
        </Button>
      </div>
    );

  return (
    <>
      <Head>
        <title>Dyslexia App | VBSD</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex w-full min-h-screen flex-column justify-content-center align-items-center text-center">
        <Card>
          <div className="flex flex-column sm:flex-row justify-content-center align-items-center flex-wrap gap-4 sm:gap-7 p-4">
            <div>
              <h1>
                Dyslexia <br /> Dashboard
              </h1>
              <p>version {version}</p>
              {updateApp}
            </div>
            <div>
              {/* <SplashSpeedDial /> */}
              <LoginButton disabled={!appIsUpdated} />
            </div>
          </div>
        </Card>
      </main>
    </>
  );
};

// function AuthShowcase() {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = api.example.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined },
//   );

//   return (
//     <div className={styles.authContainer}>
//       <p className={styles.showcaseText}>
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className={styles.loginButton}
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// }

export default Home;
