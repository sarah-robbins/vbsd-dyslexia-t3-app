generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model appSettings {
  id                     Int      @id(map: "app_settings_pkey") @default(autoincrement())
  school_name            String
  primary_color          String
  school_options         String[]
  meeting_status_options String[]
  user_role_options      String[]
  initial_view_options   String[]
  grade_options          String[]
  program_options        String[]
  services_options       String[]
}

model dummyMeetings {
  id             Int       @id @unique @default(autoincrement())
  name           String    @default("") @db.VarChar
  student_id     Int?
  start          DateTime? @db.Timestamp(6)
  end            DateTime? @db.Timestamp(6)
  meeting_status String    @default("") @db.VarChar
  program        String?   @db.VarChar
  level_lesson   String?   @db.VarChar
  meeting_notes  String?   @db.VarChar
  recorded_by    String    @default("") @db.VarChar
  recorded_on    DateTime  @default(now()) @db.Timestamp(6)
  edited_by      String?   @db.VarChar
  edited_on      DateTime? @db.Timestamp(6)
}

model dummyStudents {
  id                      Int       @id @unique @default(autoincrement())
  school                  String?   @db.VarChar
  first_name              String?   @db.VarChar
  last_name               String?   @db.VarChar
  grade                   String?   @db.VarChar
  home_room_teacher       String?   @db.VarChar
  tutor_ln                String?   @db.VarChar
  tutor_fn                String?   @db.VarChar
  intervention_program    String?   @db.VarChar
  level_lesson            String?   @db.VarChar
  date_intervention_began DateTime? @db.Date
  services                String?   @db.VarChar
  new_location            String?   @db.VarChar
  additional_comments     String?   @db.VarChar
  last_edited             DateTime? @db.Timestamp(6)
  created_at              DateTime? @default(now()) @db.Timestamptz(6)
  new_student             Boolean?  @default(true)
  moved                   Boolean?  @default(false)
  withdrew                Boolean?  @default(false)
  schedule                Json?
}

model dummyUsers {
  id               Int      @id @unique @default(autoincrement())
  first_name       String   @default("") @db.VarChar
  last_name        String   @default("") @db.VarChar
  school           String   @default("") @db.VarChar
  email            String   @default("") @db.VarChar
  phone            String   @default("") @db.VarChar
  role             String   @default("") @db.VarChar
  super_admin_role String?  @db.VarChar
  picture          String?  @db.VarChar
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  view             String   @default("") @db.VarChar
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  role          String?
  school        String?
  superAdmin    Boolean?  @default(false)
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
