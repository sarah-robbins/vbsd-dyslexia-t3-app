generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  role          String?
  school        String?
  superAdmin    Boolean?  @default(false)
  updatedAt     DateTime  @updatedAt
  view          String?
  userId        Int?      @unique
  accounts      Account[]
  sessions      Session[]
  Users         Users?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AppSettings {
  id                     Int      @id(map: "app_settings_pkey") @default(autoincrement())
  school_name            String
  primary_color          String
  school_options         String[]
  meeting_status_options String[]
  user_role_options      String[]
  initial_view_options   String[]
  grade_options          String[]
  program_options        String[]
  services_options       String[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model MeetingAttendees {
  id             Int      @id @unique @default(autoincrement())
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  meeting_status String
  student_id     Int
  meeting_id     Int
  name           String?
  tutor_id       Int?
  Meetings       Meetings @relation(fields: [meeting_id], references: [id], onDelete: Cascade)
  Students       Students @relation(fields: [student_id], references: [id], onDelete: Cascade)
}

model Meetings {
  id               Int                @id(map: "dummyMeetings_pkey") @unique(map: "dummyMeetings_id_key") @default(autoincrement())
  start            DateTime?          @db.Timestamp(6)
  end              DateTime?          @db.Timestamp(6)
  program          String?
  level_lesson     String?
  meeting_notes    String?
  recorded_by      String
  recorded_on      DateTime           @default(now()) @db.Timestamp(6)
  edited_by        String?
  edited_on        DateTime?          @db.Timestamp(6)
  tutor_id         Int                @default(0)
  MeetingAttendees MeetingAttendees[]
}

model Students {
  id                      Int                @id(map: "dummyStudents_pkey") @unique(map: "dummyStudents_id_key") @default(autoincrement())
  school                  String?
  first_name              String?
  last_name               String?
  grade                   String?
  home_room_teacher       String?
  tutor_id                Int?
  intervention_program    String?
  level_lesson            String?
  date_intervention_began DateTime?          @db.Date
  services                String?
  new_student             Boolean?           @default(true)
  moved                   Boolean?           @default(false)
  new_location            String?
  withdrew                Boolean?           @default(false)
  additional_comments     String?
  last_edited             DateTime?          @default(now()) @db.Timestamptz(6)
  schedule                Json?
  graduated               Boolean?           @default(false)
  student_assigned_id     String?            @unique
  MeetingAttendees        MeetingAttendees[]
  Users                   Users?             @relation(fields: [tutor_id], references: [id])
}

model Users {
  id               Int        @id(map: "dummyUsers_pkey") @unique @default(autoincrement())
  first_name       String?
  last_name        String?
  school           String?
  email            String?    @unique
  phone            String?
  role             String?
  super_admin_role Boolean?
  picture          String?
  created_at       DateTime   @default(now()) @db.Timestamptz(6)
  view             String?
  Students         Students[]
  User             User?
}
